(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{516:function(e,t,s){"use strict";s.r(t);var a=s(53),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"testing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#testing"}},[e._v("#")]),e._v(" Testing")]),e._v(" "),s("p",[e._v("Our testing configuration allows to test "),s("code",[e._v(".js;.ts;.jsx;.tsx")]),e._v(" extensions. The configuration is already available at the root folder.")]),e._v(" "),s("p",[e._v("We use "),s("a",{attrs:{href:"https://cucumber.io/docs/gherkin/reference/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Gherkin"),s("OutboundLink")],1),e._v(" to help keep our tests readable and maintainable. Each test is related to a feature file that looks like this:")]),e._v(" "),s("div",{staticClass:"language-gherkin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-gherkin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token feature"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Feature:")]),s("span",{pre:!0,attrs:{class:"token important"}},[e._v(" Shell client")]),e._v("\n")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token scenario"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Scenario:")]),s("span",{pre:!0,attrs:{class:"token important"}},[e._v(" Plugin method invokation")])]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token atrule"}},[e._v("Given")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token atrule"}},[e._v("I")]),e._v(" have one plugin registered in my shell\n  "),s("span",{pre:!0,attrs:{class:"token atrule"}},[e._v("And")]),e._v(" My shell and shell client are configured with a direct message bus\n  "),s("span",{pre:!0,attrs:{class:"token atrule"}},[e._v("When")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token atrule"}},[e._v("I")]),e._v(" invoke a method from my plugin\n  "),s("span",{pre:!0,attrs:{class:"token atrule"}},[e._v("Then")]),e._v(" The invokation should be resolved with the method result\n")])])]),s("p",[e._v("We use the package "),s("a",{attrs:{href:"https://github.com/bencompton/jest-cucumber",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("jest-cucumber")]),s("OutboundLink")],1),e._v(" to link our test files "),s("code",[e._v(".spec.ts")]),e._v(" with our features to ensure we did follow the BDD method and didn't forget any test case that we were planning on doing.")]),e._v(" "),s("p",[e._v("You can check out examples by clicking on this "),s("a",{attrs:{href:"https://github.com/ovh/manager/blob/master/packages/components/ovh-shell/__tests__/client/shell-client.spec.ts",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("To run all your tests, you can use the following command:")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("yarn")]),e._v(" test:jest\n")])])]),s("p",[e._v("You can also run a specific test from the root by specifying the part of a part of the path:")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This will run container tests")]),e._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("yarn")]),e._v(" test:jest container\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This will only run the shell test")]),e._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("yarn")]),e._v(" test:jest shell.spec.ts\n")])])]),s("p",[e._v("To write a unit test:")]),e._v(" "),s("ul",[s("li",[e._v("Write your use cases in a "),s("code",[e._v(".feature")]),e._v(" file.")]),e._v(" "),s("li",[e._v("Link your feature to your test using the method "),s("code",[e._v("loadFeature")]),e._v(" from "),s("code",[e._v("jest-cucumber")]),e._v(".")]),e._v(" "),s("li",[e._v("Start writing your use cases with the "),s("code",[e._v("given")]),e._v(", "),s("code",[e._v("when")]),e._v(", "),s("code",[e._v("then")]),e._v(" methods exposed by the "),s("code",[e._v("test")]),e._v(" method from "),s("code",[e._v("jest-cucumber")]),e._v(".")])]),e._v(" "),s("p",[e._v("Everything that is new should be tested. There is no coverage minimum but make sure that your main features don't break. It is appreciated if you can go further than that.")]),e._v(" "),s("p",[e._v("If you are using "),s("code",[e._v("React")]),e._v(", you can test your UI by using "),s("a",{attrs:{href:"https://testing-library.com/docs/react-testing-library/intro/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("@testing-library/react")]),s("OutboundLink")],1),e._v(".\nYou can either use Gherkin to test your logic, or, if you want to test that your UI doesn't change, use snapshot testing features provided by jest.")]),e._v(" "),s("p",[e._v("You can find examples under the "),s("code",[e._v("container")]),e._v(" app.")])])}),[],!1,null,null,null);t.default=n.exports}}]);